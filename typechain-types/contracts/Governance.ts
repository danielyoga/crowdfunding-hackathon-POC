/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Governance {
  export type ProposalStruct = {
    id: BigNumberish;
    proposalType: BigNumberish;
    title: string;
    description: string;
    proposer: AddressLike;
    startTime: BigNumberish;
    endTime: BigNumberish;
    yesVotes: BigNumberish;
    noVotes: BigNumberish;
    totalVotingPower: BigNumberish;
    state: BigNumberish;
    executionData: BytesLike;
    targetContract: AddressLike;
    executionTime: BigNumberish;
  };

  export type ProposalStructOutput = [
    id: bigint,
    proposalType: bigint,
    title: string,
    description: string,
    proposer: string,
    startTime: bigint,
    endTime: bigint,
    yesVotes: bigint,
    noVotes: bigint,
    totalVotingPower: bigint,
    state: bigint,
    executionData: string,
    targetContract: string,
    executionTime: bigint
  ] & {
    id: bigint;
    proposalType: bigint;
    title: string;
    description: string;
    proposer: string;
    startTime: bigint;
    endTime: bigint;
    yesVotes: bigint;
    noVotes: bigint;
    totalVotingPower: bigint;
    state: bigint;
    executionData: string;
    targetContract: string;
    executionTime: bigint;
  };

  export type VoterStruct = {
    votingPower: BigNumberish;
    hasVoted: boolean;
    support: boolean;
    votedAt: BigNumberish;
  };

  export type VoterStructOutput = [
    votingPower: bigint,
    hasVoted: boolean,
    support: boolean,
    votedAt: bigint
  ] & {
    votingPower: bigint;
    hasVoted: boolean;
    support: boolean;
    votedAt: bigint;
  };
}

export interface GovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "APPROVAL_THRESHOLD"
      | "EXECUTION_DELAY"
      | "MIN_PROPOSAL_POWER"
      | "QUORUM_THRESHOLD"
      | "VOTING_PERIOD"
      | "activeProposals"
      | "authorizedContracts"
      | "canExecuteProposal"
      | "cancelProposal"
      | "createProposal"
      | "executeProposal"
      | "finalizeProposal"
      | "getActiveProposals"
      | "getProposal"
      | "getProposalResults"
      | "getTotalVotingPower"
      | "getVote"
      | "owner"
      | "proposalCount"
      | "proposals"
      | "renounceOwnership"
      | "setContractAuthorization"
      | "transferOwnership"
      | "updateVotingPower"
      | "vote"
      | "votes"
      | "votingPower"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractAuthorized"
      | "OwnershipTransferred"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "ProposalStateChanged"
      | "VoteCast"
      | "VotingPowerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "APPROVAL_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROPOSAL_POWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUORUM_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [BigNumberish, string, string, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotingPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContractAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingPower",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPower",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "APPROVAL_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROPOSAL_POWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUORUM_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
}

export namespace ContractAuthorizedEvent {
  export type InputTuple = [contractAddress: AddressLike, authorized: boolean];
  export type OutputTuple = [contractAddress: string, authorized: boolean];
  export interface OutputObject {
    contractAddress: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposalType: BigNumberish,
    title: string,
    proposer: AddressLike,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposalType: bigint,
    title: string,
    proposer: string,
    endTime: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposalType: bigint;
    title: string;
    proposer: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    success: boolean,
    returnData: BytesLike
  ];
  export type OutputTuple = [
    proposalId: bigint,
    success: boolean,
    returnData: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    success: boolean;
    returnData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStateChangedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    oldState: BigNumberish,
    newState: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    oldState: bigint,
    newState: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    oldState: bigint;
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    support: boolean,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    support: boolean,
    votingPower: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    support: boolean;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldPower: BigNumberish,
    newPower: BigNumberish
  ];
  export type OutputTuple = [user: string, oldPower: bigint, newPower: bigint];
  export interface OutputObject {
    user: string;
    oldPower: bigint;
    newPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Governance extends BaseContract {
  contractName: "Governance";

  connect(runner?: ContractRunner | null): Governance;
  waitForDeployment(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  APPROVAL_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  EXECUTION_DELAY: TypedContractMethod<[], [bigint], "view">;

  MIN_PROPOSAL_POWER: TypedContractMethod<[], [bigint], "view">;

  QUORUM_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  activeProposals: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  authorizedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  canExecuteProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  cancelProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [
      proposalType: BigNumberish,
      title: string,
      description: string,
      executionData: BytesLike,
      targetContract: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  finalizeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveProposals: TypedContractMethod<[], [bigint[]], "view">;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [Governance.ProposalStructOutput],
    "view"
  >;

  getProposalResults: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        yesVotes: bigint;
        noVotes: bigint;
        totalVotingPower: bigint;
        quorumRequired: bigint;
        quorumMet: boolean;
        approved: boolean;
      }
    ],
    "view"
  >;

  getTotalVotingPower: TypedContractMethod<[], [bigint], "view">;

  getVote: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [Governance.VoterStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        id: bigint;
        proposalType: bigint;
        title: string;
        description: string;
        proposer: string;
        startTime: bigint;
        endTime: bigint;
        yesVotes: bigint;
        noVotes: bigint;
        totalVotingPower: bigint;
        state: bigint;
        executionData: string;
        targetContract: string;
        executionTime: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setContractAuthorization: TypedContractMethod<
    [contractAddress: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVotingPower: TypedContractMethod<
    [user: AddressLike, newPower: BigNumberish],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  votes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, boolean, boolean, bigint] & {
        votingPower: bigint;
        hasVoted: boolean;
        support: boolean;
        votedAt: bigint;
      }
    ],
    "view"
  >;

  votingPower: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "APPROVAL_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EXECUTION_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PROPOSAL_POWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUORUM_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeProposals"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canExecuteProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      proposalType: BigNumberish,
      title: string,
      description: string,
      executionData: BytesLike,
      targetContract: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveProposals"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [Governance.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalResults"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        yesVotes: bigint;
        noVotes: bigint;
        totalVotingPower: bigint;
        quorumRequired: bigint;
        quorumMet: boolean;
        approved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalVotingPower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [Governance.VoterStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        id: bigint;
        proposalType: bigint;
        title: string;
        description: string;
        proposer: string;
        startTime: bigint;
        endTime: bigint;
        yesVotes: bigint;
        noVotes: bigint;
        totalVotingPower: bigint;
        state: bigint;
        executionData: string;
        targetContract: string;
        executionTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractAuthorization"
  ): TypedContractMethod<
    [contractAddress: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVotingPower"
  ): TypedContractMethod<
    [user: AddressLike, newPower: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, boolean, boolean, bigint] & {
        votingPower: bigint;
        hasVoted: boolean;
        support: boolean;
        votedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingPower"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "ContractAuthorized"
  ): TypedContractEvent<
    ContractAuthorizedEvent.InputTuple,
    ContractAuthorizedEvent.OutputTuple,
    ContractAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStateChanged"
  ): TypedContractEvent<
    ProposalStateChangedEvent.InputTuple,
    ProposalStateChangedEvent.OutputTuple,
    ProposalStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerUpdated"
  ): TypedContractEvent<
    VotingPowerUpdatedEvent.InputTuple,
    VotingPowerUpdatedEvent.OutputTuple,
    VotingPowerUpdatedEvent.OutputObject
  >;

  filters: {
    "ContractAuthorized(address,bool)": TypedContractEvent<
      ContractAuthorizedEvent.InputTuple,
      ContractAuthorizedEvent.OutputTuple,
      ContractAuthorizedEvent.OutputObject
    >;
    ContractAuthorized: TypedContractEvent<
      ContractAuthorizedEvent.InputTuple,
      ContractAuthorizedEvent.OutputTuple,
      ContractAuthorizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalCreated(uint256,uint8,string,address,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256,bool,bytes)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalStateChanged(uint256,uint8,uint8)": TypedContractEvent<
      ProposalStateChangedEvent.InputTuple,
      ProposalStateChangedEvent.OutputTuple,
      ProposalStateChangedEvent.OutputObject
    >;
    ProposalStateChanged: TypedContractEvent<
      ProposalStateChangedEvent.InputTuple,
      ProposalStateChangedEvent.OutputTuple,
      ProposalStateChangedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingPowerUpdated(address,uint256,uint256)": TypedContractEvent<
      VotingPowerUpdatedEvent.InputTuple,
      VotingPowerUpdatedEvent.OutputTuple,
      VotingPowerUpdatedEvent.OutputObject
    >;
    VotingPowerUpdated: TypedContractEvent<
      VotingPowerUpdatedEvent.InputTuple,
      VotingPowerUpdatedEvent.OutputTuple,
      VotingPowerUpdatedEvent.OutputObject
    >;
  };
}
