/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Campaign {
  export type CampaignDataStruct = {
    title: string;
    description: string;
    founder: AddressLike;
    fundingGoal: BigNumberish;
    totalRaised: BigNumberish;
    totalCommittedPool: BigNumberish;
    totalReservePool: BigNumberish;
    currentMilestone: BigNumberish;
    state: BigNumberish;
    createdAt: BigNumberish;
    platformFeePercentage: BigNumberish;
  };

  export type CampaignDataStructOutput = [
    title: string,
    description: string,
    founder: string,
    fundingGoal: bigint,
    totalRaised: bigint,
    totalCommittedPool: bigint,
    totalReservePool: bigint,
    currentMilestone: bigint,
    state: bigint,
    createdAt: bigint,
    platformFeePercentage: bigint
  ] & {
    title: string;
    description: string;
    founder: string;
    fundingGoal: bigint;
    totalRaised: bigint;
    totalCommittedPool: bigint;
    totalReservePool: bigint;
    currentMilestone: bigint;
    state: bigint;
    createdAt: bigint;
    platformFeePercentage: bigint;
  };

  export type FunderStruct = {
    totalContribution: BigNumberish;
    committedAmount: BigNumberish;
    reserveAmount: BigNumberish;
    riskProfile: BigNumberish;
    hasVoted: [boolean, boolean, boolean, boolean, boolean];
    missedVotes: BigNumberish;
    isAutoYes: boolean;
    hasRefunded: boolean;
    fundedAt: BigNumberish;
  };

  export type FunderStructOutput = [
    totalContribution: bigint,
    committedAmount: bigint,
    reserveAmount: bigint,
    riskProfile: bigint,
    hasVoted: [boolean, boolean, boolean, boolean, boolean],
    missedVotes: bigint,
    isAutoYes: boolean,
    hasRefunded: boolean,
    fundedAt: bigint
  ] & {
    totalContribution: bigint;
    committedAmount: bigint;
    reserveAmount: bigint;
    riskProfile: bigint;
    hasVoted: [boolean, boolean, boolean, boolean, boolean];
    missedVotes: bigint;
    isAutoYes: boolean;
    hasRefunded: boolean;
    fundedAt: bigint;
  };

  export type MilestoneStruct = {
    description: string;
    releasePercentage: BigNumberish;
    deadline: BigNumberish;
    state: BigNumberish;
    votingDeadline: BigNumberish;
    yesVotes: BigNumberish;
    noVotes: BigNumberish;
    totalVotingPower: BigNumberish;
    evidenceIPFS: string;
    rejectionCount: BigNumberish;
    submittedAt: BigNumberish;
  };

  export type MilestoneStructOutput = [
    description: string,
    releasePercentage: bigint,
    deadline: bigint,
    state: bigint,
    votingDeadline: bigint,
    yesVotes: bigint,
    noVotes: bigint,
    totalVotingPower: bigint,
    evidenceIPFS: string,
    rejectionCount: bigint,
    submittedAt: bigint
  ] & {
    description: string;
    releasePercentage: bigint;
    deadline: bigint;
    state: bigint;
    votingDeadline: bigint;
    yesVotes: bigint;
    noVotes: bigint;
    totalVotingPower: bigint;
    evidenceIPFS: string;
    rejectionCount: bigint;
    submittedAt: bigint;
  };
}

export interface CampaignInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "APPROVAL_THRESHOLD"
      | "MAX_WHALE_POWER"
      | "VOTING_PERIOD"
      | "campaignData"
      | "claimRefund"
      | "finalizeMilestone"
      | "fund"
      | "funders"
      | "fundersList"
      | "getCampaignData"
      | "getCurrentMilestoneInfo"
      | "getFunder"
      | "getFundersList"
      | "getMilestone"
      | "getRefundAmount"
      | "hasVotedOnMilestone"
      | "milestones"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "submitMilestone"
      | "transferOwnership"
      | "triggerEmergencyFailure"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignStateChanged"
      | "EmergencyFailureTriggered"
      | "FundReceived"
      | "FundsReleased"
      | "MilestoneCompleted"
      | "MilestoneRejected"
      | "MilestoneSubmitted"
      | "OwnershipTransferred"
      | "Paused"
      | "RefundClaimed"
      | "Unpaused"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "APPROVAL_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WHALE_POWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fund", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "funders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundersList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMilestoneInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFunder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundersList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotedOnMilestone",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitMilestone",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerEmergencyFailure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "APPROVAL_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WHALE_POWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMilestoneInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFunder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFundersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVotedOnMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerEmergencyFailure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace CampaignStateChangedEvent {
  export type InputTuple = [oldState: BigNumberish, newState: BigNumberish];
  export type OutputTuple = [oldState: bigint, newState: bigint];
  export interface OutputObject {
    oldState: bigint;
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyFailureTriggeredEvent {
  export type InputTuple = [
    initiator: AddressLike,
    votingDeadline: BigNumberish
  ];
  export type OutputTuple = [initiator: string, votingDeadline: bigint];
  export interface OutputObject {
    initiator: string;
    votingDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundReceivedEvent {
  export type InputTuple = [
    funder: AddressLike,
    amount: BigNumberish,
    riskProfile: BigNumberish,
    committedAmount: BigNumberish,
    reserveAmount: BigNumberish
  ];
  export type OutputTuple = [
    funder: string,
    amount: bigint,
    riskProfile: bigint,
    committedAmount: bigint,
    reserveAmount: bigint
  ];
  export interface OutputObject {
    funder: string;
    amount: bigint;
    riskProfile: bigint;
    committedAmount: bigint;
    reserveAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [
    milestoneId: BigNumberish,
    amount: BigNumberish,
    founder: AddressLike
  ];
  export type OutputTuple = [
    milestoneId: bigint,
    amount: bigint,
    founder: string
  ];
  export interface OutputObject {
    milestoneId: bigint;
    amount: bigint;
    founder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneCompletedEvent {
  export type InputTuple = [
    milestoneId: BigNumberish,
    fundsReleased: BigNumberish,
    yesVotes: BigNumberish,
    noVotes: BigNumberish
  ];
  export type OutputTuple = [
    milestoneId: bigint,
    fundsReleased: bigint,
    yesVotes: bigint,
    noVotes: bigint
  ];
  export interface OutputObject {
    milestoneId: bigint;
    fundsReleased: bigint;
    yesVotes: bigint;
    noVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneRejectedEvent {
  export type InputTuple = [
    milestoneId: BigNumberish,
    yesVotes: BigNumberish,
    noVotes: BigNumberish,
    rejectionCount: BigNumberish
  ];
  export type OutputTuple = [
    milestoneId: bigint,
    yesVotes: bigint,
    noVotes: bigint,
    rejectionCount: bigint
  ];
  export interface OutputObject {
    milestoneId: bigint;
    yesVotes: bigint;
    noVotes: bigint;
    rejectionCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneSubmittedEvent {
  export type InputTuple = [
    milestoneId: BigNumberish,
    evidenceIPFS: string,
    votingDeadline: BigNumberish
  ];
  export type OutputTuple = [
    milestoneId: bigint,
    evidenceIPFS: string,
    votingDeadline: bigint
  ];
  export interface OutputObject {
    milestoneId: bigint;
    evidenceIPFS: string;
    votingDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundClaimedEvent {
  export type InputTuple = [
    funder: AddressLike,
    refundAmount: BigNumberish,
    originalContribution: BigNumberish
  ];
  export type OutputTuple = [
    funder: string,
    refundAmount: bigint,
    originalContribution: bigint
  ];
  export interface OutputObject {
    funder: string;
    refundAmount: bigint;
    originalContribution: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    milestoneId: BigNumberish,
    voter: AddressLike,
    support: boolean,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    milestoneId: bigint,
    voter: string,
    support: boolean,
    votingPower: bigint
  ];
  export interface OutputObject {
    milestoneId: bigint;
    voter: string;
    support: boolean;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Campaign extends BaseContract {
  contractName: "Campaign";

  connect(runner?: ContractRunner | null): Campaign;
  waitForDeployment(): Promise<this>;

  interface: CampaignInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  APPROVAL_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  MAX_WHALE_POWER: TypedContractMethod<[], [bigint], "view">;

  VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  campaignData: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        title: string;
        description: string;
        founder: string;
        fundingGoal: bigint;
        totalRaised: bigint;
        totalCommittedPool: bigint;
        totalReservePool: bigint;
        currentMilestone: bigint;
        state: bigint;
        createdAt: bigint;
        platformFeePercentage: bigint;
      }
    ],
    "view"
  >;

  claimRefund: TypedContractMethod<[], [void], "nonpayable">;

  finalizeMilestone: TypedContractMethod<
    [milestoneId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fund: TypedContractMethod<[riskProfile: BigNumberish], [void], "payable">;

  funders: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean, bigint] & {
        totalContribution: bigint;
        committedAmount: bigint;
        reserveAmount: bigint;
        riskProfile: bigint;
        missedVotes: bigint;
        isAutoYes: boolean;
        hasRefunded: boolean;
        fundedAt: bigint;
      }
    ],
    "view"
  >;

  fundersList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getCampaignData: TypedContractMethod<
    [],
    [Campaign.CampaignDataStructOutput],
    "view"
  >;

  getCurrentMilestoneInfo: TypedContractMethod<
    [],
    [
      [bigint, string, bigint, bigint, bigint] & {
        milestoneId: bigint;
        description: string;
        state: bigint;
        deadline: bigint;
        votingDeadline: bigint;
      }
    ],
    "view"
  >;

  getFunder: TypedContractMethod<
    [funderAddress: AddressLike],
    [Campaign.FunderStructOutput],
    "view"
  >;

  getFundersList: TypedContractMethod<[], [string[]], "view">;

  getMilestone: TypedContractMethod<
    [milestoneId: BigNumberish],
    [Campaign.MilestoneStructOutput],
    "view"
  >;

  getRefundAmount: TypedContractMethod<
    [funderAddress: AddressLike],
    [bigint],
    "view"
  >;

  hasVotedOnMilestone: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  milestones: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        description: string;
        releasePercentage: bigint;
        deadline: bigint;
        state: bigint;
        votingDeadline: bigint;
        yesVotes: bigint;
        noVotes: bigint;
        totalVotingPower: bigint;
        evidenceIPFS: string;
        rejectionCount: bigint;
        submittedAt: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitMilestone: TypedContractMethod<
    [milestoneId: BigNumberish, evidenceIPFS: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  triggerEmergencyFailure: TypedContractMethod<[], [void], "nonpayable">;

  vote: TypedContractMethod<
    [milestoneId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "APPROVAL_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_WHALE_POWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignData"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        title: string;
        description: string;
        founder: string;
        fundingGoal: bigint;
        totalRaised: bigint;
        totalCommittedPool: bigint;
        totalReservePool: bigint;
        currentMilestone: bigint;
        state: bigint;
        createdAt: bigint;
        platformFeePercentage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizeMilestone"
  ): TypedContractMethod<[milestoneId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<[riskProfile: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "funders"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean, bigint] & {
        totalContribution: bigint;
        committedAmount: bigint;
        reserveAmount: bigint;
        riskProfile: bigint;
        missedVotes: bigint;
        isAutoYes: boolean;
        hasRefunded: boolean;
        fundedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundersList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCampaignData"
  ): TypedContractMethod<[], [Campaign.CampaignDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getCurrentMilestoneInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, bigint, bigint, bigint] & {
        milestoneId: bigint;
        description: string;
        state: bigint;
        deadline: bigint;
        votingDeadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFunder"
  ): TypedContractMethod<
    [funderAddress: AddressLike],
    [Campaign.FunderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFundersList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMilestone"
  ): TypedContractMethod<
    [milestoneId: BigNumberish],
    [Campaign.MilestoneStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRefundAmount"
  ): TypedContractMethod<[funderAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVotedOnMilestone"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        description: string;
        releasePercentage: bigint;
        deadline: bigint;
        state: bigint;
        votingDeadline: bigint;
        yesVotes: bigint;
        noVotes: bigint;
        totalVotingPower: bigint;
        evidenceIPFS: string;
        rejectionCount: bigint;
        submittedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitMilestone"
  ): TypedContractMethod<
    [milestoneId: BigNumberish, evidenceIPFS: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerEmergencyFailure"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [milestoneId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CampaignStateChanged"
  ): TypedContractEvent<
    CampaignStateChangedEvent.InputTuple,
    CampaignStateChangedEvent.OutputTuple,
    CampaignStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyFailureTriggered"
  ): TypedContractEvent<
    EmergencyFailureTriggeredEvent.InputTuple,
    EmergencyFailureTriggeredEvent.OutputTuple,
    EmergencyFailureTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "FundReceived"
  ): TypedContractEvent<
    FundReceivedEvent.InputTuple,
    FundReceivedEvent.OutputTuple,
    FundReceivedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneCompleted"
  ): TypedContractEvent<
    MilestoneCompletedEvent.InputTuple,
    MilestoneCompletedEvent.OutputTuple,
    MilestoneCompletedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneRejected"
  ): TypedContractEvent<
    MilestoneRejectedEvent.InputTuple,
    MilestoneRejectedEvent.OutputTuple,
    MilestoneRejectedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneSubmitted"
  ): TypedContractEvent<
    MilestoneSubmittedEvent.InputTuple,
    MilestoneSubmittedEvent.OutputTuple,
    MilestoneSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RefundClaimed"
  ): TypedContractEvent<
    RefundClaimedEvent.InputTuple,
    RefundClaimedEvent.OutputTuple,
    RefundClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "CampaignStateChanged(uint8,uint8)": TypedContractEvent<
      CampaignStateChangedEvent.InputTuple,
      CampaignStateChangedEvent.OutputTuple,
      CampaignStateChangedEvent.OutputObject
    >;
    CampaignStateChanged: TypedContractEvent<
      CampaignStateChangedEvent.InputTuple,
      CampaignStateChangedEvent.OutputTuple,
      CampaignStateChangedEvent.OutputObject
    >;

    "EmergencyFailureTriggered(address,uint256)": TypedContractEvent<
      EmergencyFailureTriggeredEvent.InputTuple,
      EmergencyFailureTriggeredEvent.OutputTuple,
      EmergencyFailureTriggeredEvent.OutputObject
    >;
    EmergencyFailureTriggered: TypedContractEvent<
      EmergencyFailureTriggeredEvent.InputTuple,
      EmergencyFailureTriggeredEvent.OutputTuple,
      EmergencyFailureTriggeredEvent.OutputObject
    >;

    "FundReceived(address,uint256,uint8,uint256,uint256)": TypedContractEvent<
      FundReceivedEvent.InputTuple,
      FundReceivedEvent.OutputTuple,
      FundReceivedEvent.OutputObject
    >;
    FundReceived: TypedContractEvent<
      FundReceivedEvent.InputTuple,
      FundReceivedEvent.OutputTuple,
      FundReceivedEvent.OutputObject
    >;

    "FundsReleased(uint256,uint256,address)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "MilestoneCompleted(uint256,uint256,uint256,uint256)": TypedContractEvent<
      MilestoneCompletedEvent.InputTuple,
      MilestoneCompletedEvent.OutputTuple,
      MilestoneCompletedEvent.OutputObject
    >;
    MilestoneCompleted: TypedContractEvent<
      MilestoneCompletedEvent.InputTuple,
      MilestoneCompletedEvent.OutputTuple,
      MilestoneCompletedEvent.OutputObject
    >;

    "MilestoneRejected(uint256,uint256,uint256,uint8)": TypedContractEvent<
      MilestoneRejectedEvent.InputTuple,
      MilestoneRejectedEvent.OutputTuple,
      MilestoneRejectedEvent.OutputObject
    >;
    MilestoneRejected: TypedContractEvent<
      MilestoneRejectedEvent.InputTuple,
      MilestoneRejectedEvent.OutputTuple,
      MilestoneRejectedEvent.OutputObject
    >;

    "MilestoneSubmitted(uint256,string,uint256)": TypedContractEvent<
      MilestoneSubmittedEvent.InputTuple,
      MilestoneSubmittedEvent.OutputTuple,
      MilestoneSubmittedEvent.OutputObject
    >;
    MilestoneSubmitted: TypedContractEvent<
      MilestoneSubmittedEvent.InputTuple,
      MilestoneSubmittedEvent.OutputTuple,
      MilestoneSubmittedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RefundClaimed(address,uint256,uint256)": TypedContractEvent<
      RefundClaimedEvent.InputTuple,
      RefundClaimedEvent.OutputTuple,
      RefundClaimedEvent.OutputObject
    >;
    RefundClaimed: TypedContractEvent<
      RefundClaimedEvent.InputTuple,
      RefundClaimedEvent.OutputTuple,
      RefundClaimedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
