/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CampaignFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_DESCRIPTION_LENGTH"
      | "MAX_FUNDING_GOAL"
      | "MAX_MILESTONE_DEADLINE"
      | "MAX_MILESTONE_PERCENTAGE"
      | "MAX_PLATFORM_FEE"
      | "MAX_TITLE_LENGTH"
      | "MIN_FUNDING_GOAL"
      | "MIN_MILESTONE_DEADLINE"
      | "MIN_MILESTONE_PERCENTAGE"
      | "MIN_TITLE_LENGTH"
      | "activeCampaigns"
      | "allCampaigns"
      | "campaignCount"
      | "campaignCreationFee"
      | "campaigns"
      | "createCampaign"
      | "founderCampaigns"
      | "getAllActiveCampaigns"
      | "getAllCampaigns"
      | "getCampaign"
      | "getFounderCampaigns"
      | "getPlatformStats"
      | "isCampaignActive"
      | "markCampaignInactive"
      | "owner"
      | "platformFeePercentage"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateCreationFee"
      | "updatePlatformFee"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "CreationFeeUpdated"
      | "FeesWithdrawn"
      | "OwnershipTransferred"
      | "PlatformFeeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_DESCRIPTION_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FUNDING_GOAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MILESTONE_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MILESTONE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TITLE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_FUNDING_GOAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_MILESTONE_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_MILESTONE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TITLE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeCampaigns",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allCampaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      string,
      string,
      BigNumberish,
      [string, string, string, string, string],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "founderCampaigns",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFounderCampaigns",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaignActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markCampaignInactive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_DESCRIPTION_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FUNDING_GOAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MILESTONE_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MILESTONE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TITLE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_FUNDING_GOAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_MILESTONE_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_MILESTONE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TITLE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "founderCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFounderCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCampaignActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markCampaignInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    campaignAddress: AddressLike,
    founder: AddressLike,
    title: string,
    fundingGoal: BigNumberish,
    createdAt: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    campaignAddress: string,
    founder: string,
    title: string,
    fundingGoal: bigint,
    createdAt: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    campaignAddress: string;
    founder: string;
    title: string;
    fundingGoal: bigint;
    createdAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreationFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CampaignFactory extends BaseContract {
  contractName: "CampaignFactory";

  connect(runner?: ContractRunner | null): CampaignFactory;
  waitForDeployment(): Promise<this>;

  interface: CampaignFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_DESCRIPTION_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MAX_FUNDING_GOAL: TypedContractMethod<[], [bigint], "view">;

  MAX_MILESTONE_DEADLINE: TypedContractMethod<[], [bigint], "view">;

  MAX_MILESTONE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  MAX_PLATFORM_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_TITLE_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MIN_FUNDING_GOAL: TypedContractMethod<[], [bigint], "view">;

  MIN_MILESTONE_DEADLINE: TypedContractMethod<[], [bigint], "view">;

  MIN_MILESTONE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  MIN_TITLE_LENGTH: TypedContractMethod<[], [bigint], "view">;

  activeCampaigns: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  allCampaigns: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  campaignCount: TypedContractMethod<[], [bigint], "view">;

  campaignCreationFee: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createCampaign: TypedContractMethod<
    [
      title: string,
      description: string,
      fundingGoal: BigNumberish,
      milestoneDescriptions: [string, string, string, string, string],
      milestoneDeadlines: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      milestonePercentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [string],
    "payable"
  >;

  founderCampaigns: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getAllActiveCampaigns: TypedContractMethod<[], [string[]], "view">;

  getAllCampaigns: TypedContractMethod<[], [string[]], "view">;

  getCampaign: TypedContractMethod<
    [campaignId: BigNumberish],
    [string],
    "view"
  >;

  getFounderCampaigns: TypedContractMethod<
    [founder: AddressLike],
    [bigint[]],
    "view"
  >;

  getPlatformStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalCampaigns: bigint;
        activeCampaignsCount: bigint;
        currentPlatformFee: bigint;
        currentCreationFee: bigint;
      }
    ],
    "view"
  >;

  isCampaignActive: TypedContractMethod<
    [campaignAddress: AddressLike],
    [boolean],
    "view"
  >;

  markCampaignInactive: TypedContractMethod<
    [campaignAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeePercentage: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCreationFee: TypedContractMethod<
    [newCreationFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_DESCRIPTION_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FUNDING_GOAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_MILESTONE_DEADLINE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_MILESTONE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLATFORM_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TITLE_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_FUNDING_GOAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_MILESTONE_DEADLINE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_MILESTONE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_TITLE_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeCampaigns"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "allCampaigns"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "campaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignCreationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      fundingGoal: BigNumberish,
      milestoneDescriptions: [string, string, string, string, string],
      milestoneDeadlines: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      milestonePercentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "founderCampaigns"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllActiveCampaigns"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllCampaigns"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<[campaignId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFounderCampaigns"
  ): TypedContractMethod<[founder: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPlatformStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalCampaigns: bigint;
        activeCampaignsCount: bigint;
        currentPlatformFee: bigint;
        currentCreationFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCampaignActive"
  ): TypedContractMethod<[campaignAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "markCampaignInactive"
  ): TypedContractMethod<[campaignAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCreationFee"
  ): TypedContractMethod<[newCreationFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<
    [newFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CreationFeeUpdated"
  ): TypedContractEvent<
    CreationFeeUpdatedEvent.InputTuple,
    CreationFeeUpdatedEvent.OutputTuple,
    CreationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(uint256,address,address,string,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CreationFeeUpdated(uint256,uint256)": TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;
    CreationFeeUpdated: TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;

    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256,uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
  };
}
